{
  "version": 3,
  "sources": ["../../../app/routes/create.jsx"],
  "sourcesContent": ["import { useActionData } from \"@remix-run/react\";\nimport connectDb from \"~/db/connectDb.server\";\nimport PostForm from \"~/components/PostForm\";\nimport { redirect } from \"@remix-run/node\";\nimport { getSession } from \"~/sessions\";\n\nexport async function loader({ request }) {\n  const db = await connectDb();\n  // Check if user is admin. If not, redirect to home page.\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  const userId = session.get(\"userId\");\n\n  return {};\n}\n\nexport default function Create() {\n  const actionData = useActionData();\n  return (\n    <div className=\" pt-20\">\n      <PostForm\n        errors={actionData?.errors}\n        action=\"/create\"\n        error={actionData?.error}\n      />\n    </div>\n  );\n}\n\nexport async function action({ request }) {\n  const form = await request.formData();\n  const title = form.get(\"title\");\n  const description = form.get(\"description\");\n  const image = form.get(\"image\");\n  const size = form.get(\"size\");\n  const price = form.get(\"price\");\n  const category = form.get(\"category\");\n  try {\n    const db = await connectDb();\n    const post = await db.models.Post.create({\n      title,\n      description,\n      image,\n      size,\n      price,\n      category,\n    });\n\n    await notifySome(\n      {\n        title: `New post added: ${post.title}`,\n        data: { url: `/${post._id}` },\n        body: `A new post has been added to the store.`,\n      },\n      userIdsToNotify\n    );\n\n    // Return a redirect to the new post\n    return redirect(`/${post._id}`);\n  } catch (error) {\n    return error;\n  }\n}\n\n// TODO: Catchboundary\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AACA,uBAAsB;AADtB;AAee,SAAR,SAA0B;AAC/B,QAAM,aAAa,cAAc;AACjC,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb,6DAAC;AAAA,MACC,QAAQ,yCAAY;AAAA,MACpB,QAAO;AAAA,MACP,OAAO,yCAAY;AAAA,OAHrB;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,KALF;AAAA;AAAA;AAAA;AAAA,SAMA;AAEJ;",
  "names": []
}

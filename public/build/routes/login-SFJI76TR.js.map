{
  "version": 3,
  "sources": ["../../../app/routes/login.jsx"],
  "sourcesContent": ["import { redirect, json } from \"@remix-run/node\";\nimport { useLoaderData, Form, useActionData, Link } from \"@remix-run/react\";\nimport { getSession, commitSession } from \"~/sessions.js\";\nimport dbConnect from \"~/db/connectDb.server\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function loader({ request }) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  const userId = session.get(\"userId\");\n  if (userId) {\n    const db = await dbConnect();\n    const user = await db.models.User.findById(userId);\n    return json({ user });\n  }\n  return null;\n}\n\nexport default function Login() {\n  const actionData = useActionData();\n  const loaderData = useLoaderData();\n  return (\n    <div className=\"pt-20\">\n      {loaderData?.user ? (\n        <div>\n          <p>\n            You are logged in as: <strong>{loaderData.user.username}</strong>\n          </p>\n          <Link to=\"/settings\">\n            <button className=\"buttonPrimary\">Settings</button>\n          </Link>\n          <Form method=\"post\" action=\"/logout\">\n            <button type=\"submit\" className=\"buttonSecondary\">\n              Log out\n            </button>\n          </Form>\n        </div>\n      ) : (\n        <>\n          <div className=\"page\">\n            <h1 className=\"text-center\">Login</h1>\n            <div className=\"p-2\">\n              <Form className=\"login-form\" method=\"post\">\n                <label htmlFor=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" />\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" />\n                <button type=\"submit\">Login</button>\n                <br />\n                {actionData?.errorMessage && (\n                  <p className=\"errorText\">{actionData?.errorMessage}</p>\n                )}\n                <div style={{ textAlign: \"center\" }}>\n                  <h5>\n                    Don't have an account? <br />\n                    <Link to=\"/signup\" style={{ color: \"blue\" }}>\n                      Sign up here\n                    </Link>\n                  </h5>\n                </div>\n              </Form>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport async function action({ request }) {\n  const formData = await request.formData();\n  const FormDataObject = Object.fromEntries(formData);\n  const db = await dbConnect();\n\n  const user = await db.models.User.findOne({\n    username: formData.get(\"username\").trim(),\n  });\n\n  if (!user) {\n    return json({ errorMessage: \"User not found\" }, { status: 401 });\n  }\n\n  const passwordIsValid = bcrypt.compareSync(\n    formData.get(\"password\").trim(),\n    user.password\n  );\n\n  if (passwordIsValid) {\n    const session = await getSession(request.headers.get(\"Cookie\"));\n    session.set(\"userId\", user._id);\n    return redirect(\"/\", {\n      headers: {\n        \"set-cookie\": await commitSession(session),\n      },\n    });\n  } else {\n    return json(\n      { errorMessage: \"Password is invalid\", values: FormDataObject },\n      { status: 401 }\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAGA,uBAAsB;AACtB,sBAAmB;AAJnB;AAiBe,SAAR,QAAyB;AAC9B,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACZ,oDAAY,QACX,mDAAC;AAAA,MACC;AAAA,2DAAC;AAAA,UAAE;AAAA;AAAA,YACqB,mDAAC;AAAA,cAAQ,qBAAW,KAAK;AAAA,eAAzB;AAAA;AAAA;AAAA;AAAA,mBAAkC;AAAA;AAAA,WAD1D;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC;AAAA,UAAK,IAAG;AAAA,UACP,6DAAC;AAAA,YAAO,WAAU;AAAA,YAAgB;AAAA,aAAlC;AAAA;AAAA;AAAA;AAAA,iBAA0C;AAAA,WAD5C;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC;AAAA,UAAK,QAAO;AAAA,UAAO,QAAO;AAAA,UACzB,6DAAC;AAAA,YAAO,MAAK;AAAA,YAAS,WAAU;AAAA,YAAkB;AAAA,aAAlD;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,WAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA;AAAA,OAXF;AAAA;AAAA;AAAA;AAAA,WAYA,IAEA;AAAA,MACE,6DAAC;AAAA,QAAI,WAAU;AAAA,QACb;AAAA,6DAAC;AAAA,YAAG,WAAU;AAAA,YAAc;AAAA,aAA5B;AAAA;AAAA;AAAA;AAAA,iBAAiC;AAAA,UACjC,mDAAC;AAAA,YAAI,WAAU;AAAA,YACb,6DAAC;AAAA,cAAK,WAAU;AAAA,cAAa,QAAO;AAAA,cAClC;AAAA,mEAAC;AAAA,kBAAM,SAAQ;AAAA,kBAAW;AAAA,mBAA1B;AAAA;AAAA;AAAA;AAAA,uBAAkC;AAAA,gBAClC,mDAAC;AAAA,kBAAM,MAAK;AAAA,kBAAO,IAAG;AAAA,kBAAW,MAAK;AAAA,mBAAtC;AAAA;AAAA;AAAA;AAAA,uBAAiD;AAAA,gBACjD,mDAAC;AAAA,kBAAM,SAAQ;AAAA,kBAAW;AAAA,mBAA1B;AAAA;AAAA;AAAA;AAAA,uBAAkC;AAAA,gBAClC,mDAAC;AAAA,kBAAM,MAAK;AAAA,kBAAW,IAAG;AAAA,kBAAW,MAAK;AAAA,mBAA1C;AAAA;AAAA;AAAA;AAAA,uBAAqD;AAAA,gBACrD,mDAAC;AAAA,kBAAO,MAAK;AAAA,kBAAS;AAAA,mBAAtB;AAAA;AAAA;AAAA;AAAA,uBAA2B;AAAA,gBAC3B,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,uBAAI;AAAA,iBACH,yCAAY,iBACX,mDAAC;AAAA,kBAAE,WAAU;AAAA,kBAAa,mDAAY;AAAA,mBAAtC;AAAA;AAAA;AAAA;AAAA,uBAAmD;AAAA,gBAErD,mDAAC;AAAA,kBAAI,OAAO,EAAE,WAAW,SAAS;AAAA,kBAChC,6DAAC;AAAA,oBAAG;AAAA;AAAA,sBACqB,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,6BAAI;AAAA,sBAC3B,mDAAC;AAAA,wBAAK,IAAG;AAAA,wBAAU,OAAO,EAAE,OAAO,OAAO;AAAA,wBAAG;AAAA,yBAA7C;AAAA;AAAA;AAAA;AAAA,6BAEA;AAAA;AAAA,qBAJF;AAAA;AAAA;AAAA;AAAA,yBAKA;AAAA,mBANF;AAAA;AAAA;AAAA;AAAA,uBAOA;AAAA;AAAA,eAjBF;AAAA;AAAA;AAAA;AAAA,mBAkBA;AAAA,aAnBF;AAAA;AAAA;AAAA;AAAA,iBAoBA;AAAA;AAAA,SAtBF;AAAA;AAAA;AAAA;AAAA,aAuBA;AAAA,OAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,KAzCJ;AAAA;AAAA;AAAA;AAAA,SA2CA;AAEJ;",
  "names": []
}

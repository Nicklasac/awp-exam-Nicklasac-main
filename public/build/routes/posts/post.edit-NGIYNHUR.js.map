{
  "version": 3,
  "sources": ["../../../../app/routes/posts/post.edit.jsx"],
  "sourcesContent": ["import { Form, useActionData } from \"@remix-run/react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { getSession } from \"~/sessions\";\nimport connectDb from \"~/db/connectDb.server\";\n\n// check if session is valid - if not, redirect to login\nexport async function loader({ request }) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  //if (!session.get(\"userId\")) {\n  // return redirect(\"/login\");\n  //}\n  return json({\n    userId: session.get(\"userId\"),\n  });\n}\n\nexport async function action({ request }) {\n  const form = await request.formData();\n  const db = await connectDb();\n  try {\n    const newPost = await db.models.Post.create({\n      title: form.get(\"title\"),\n      text: form.get(\"text\"),\n      image: form.get(\"image\"),\n    });\n    return redirect(`/posts/${newPost._id}`);\n  } catch (error) {\n    return json(\n      { errors: error.errors, values: Object.fromEntries(form) },\n      { status: 400 }\n    );\n  }\n}\n\nexport default function CreatePost() {\n  const actionData = useActionData();\n  return (\n    <div>\n      <h1 className=\"text-xl pt-20\">Create code post</h1>\n      <Form method=\"post\">\n        <label htmlFor=\"title\" className=\"block\">\n          Title\n        </label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          defaultValue={actionData?.values.title}\n          id=\"title\"\n          className={\n            actionData?.errors.title ? \"border-2 border-red-500\" : null\n          }\n        />\n\n        <label htmlFor=\"text\" className=\"block\">\n          Text\n        </label>\n        <textarea\n          type=\"text\"\n          maxLength={500}\n          name=\"text\"\n          defaultValue={actionData?.values.post}\n          id=\"text\"\n          className={actionData?.errors.post ? \"border-2 border-red-500\" : null}\n        />\n\n        <label htmlFor=\"image\" className=\"block\">\n          Image\n        </label>\n\n        <input\n          type=\"image\"\n          name=\"image\"\n          id=\"image\"\n          value={image}\n          onChange={(e) => setImage(e.target.value)}\n          className={actionData?.errors.post ? \"border-2 border-red-500\" : null}\n        />\n        <br />\n        <button\n          className=\"shadow-lg bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 rounded mt-10\"\n          type=\"submit\"\n        >\n          Create new post\n        </button>\n      </Form>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAGA,uBAAsB;AAHtB;AAkCe,SAAR,aAA8B;AACnC,QAAM,aAAa,cAAc;AACjC,SACE,mDAAC;AAAA,IACC;AAAA,yDAAC;AAAA,QAAG,WAAU;AAAA,QAAgB;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA,aAA8C;AAAA,MAC9C,mDAAC;AAAA,QAAK,QAAO;AAAA,QACX;AAAA,6DAAC;AAAA,YAAM,SAAQ;AAAA,YAAQ,WAAU;AAAA,YAAQ;AAAA,aAAzC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAc,yCAAY,OAAO;AAAA,YACjC,IAAG;AAAA,YACH,YACE,yCAAY,OAAO,SAAQ,4BAA4B;AAAA,aAN3D;AAAA;AAAA;AAAA;AAAA,iBAQA;AAAA,UAEA,mDAAC;AAAA,YAAM,SAAQ;AAAA,YAAO,WAAU;AAAA,YAAQ;AAAA,aAAxC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,WAAW;AAAA,YACX,MAAK;AAAA,YACL,cAAc,yCAAY,OAAO;AAAA,YACjC,IAAG;AAAA,YACH,YAAW,yCAAY,OAAO,QAAO,4BAA4B;AAAA,aANnE;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,UAEA,mDAAC;AAAA,YAAM,SAAQ;AAAA,YAAQ,WAAU;AAAA,YAAQ;AAAA,aAAzC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAEA,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,OAAO;AAAA,YACP,UAAU,CAAC,MAAM,SAAS,EAAE,OAAO,KAAK;AAAA,YACxC,YAAW,yCAAY,OAAO,QAAO,4BAA4B;AAAA,aANnE;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,UACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC;AAAA,YACC,WAAU;AAAA,YACV,MAAK;AAAA,YACN;AAAA,aAHD;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA;AAAA,SA5CF;AAAA;AAAA;AAAA;AAAA,aA6CA;AAAA;AAAA,KA/CF;AAAA;AAAA;AAAA;AAAA,SAgDA;AAEJ;",
  "names": []
}

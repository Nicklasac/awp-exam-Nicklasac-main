{
  "version": 3,
  "sources": ["../../../app/routes/signup.jsx"],
  "sourcesContent": ["import { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport dbConnect from \"~/db/connectDb.server\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function action({ request }) {\n  const db = await dbConnect();\n  const formData = await request.formData();\n  const user = db.models.User;\n  let data = Object.fromEntries(formData);\n\n  // Check if user already exists in the database and return an error if it does. Otherwise, create a new user.\n  const userExists = await user.findOne({\n    username: data.username,\n  });\n\n  if (userExists) {\n    return json({ errorMessage: \"User already exists\" }, { status: 401 });\n  }\n\n  if (data.password == \"\" || data.username == \"\") {\n    return json(\n      { errorMessage: \"Please fill out all fields\" },\n      { status: 401 }\n    );\n  }\n\n  if (data.password !== data.confirmPassword) {\n    return json({ errorMessage: \"Passwords do not match\" }, { status: 401 });\n  } else {\n    // Hash the password before saving it to the database and then create a new user.\n    // We use a salt of 10 to make the hashing process more secure.\n    // The higher the number, the more secure the hashing process. However, it will also take longer to hash the password.\n    const hashedPassword = bcrypt.hashSync(data.password, 10).trim();\n    const newUser = new user({\n      username: data.username,\n      password: hashedPassword,\n    });\n    await newUser.save();\n    return redirect(\"/login\");\n  }\n}\n\nexport default function SignUp() {\n  const actionData = useActionData();\n  return (\n    <div className=\"page pt-20\">\n      <h1 className=\"text-center\">Sign Up</h1>\n      <div className=\"p-2\">\n        <Form\n          className=\"mx-auto text-center bg-slate-200 w-2/5 rounded-lg drop-shadow-lg\"\n          method=\"post\"\n          reloadDocument\n        >\n          <label className=\"block p-5\" htmlFor=\"username\">\n            Username\n          </label>\n          <input type=\"text\" id=\"username\" name=\"username\" />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            defaultValue={actionData?.values?.password}\n          />\n          <label htmlFor=\"confirmPassword\">Confirm Password</label>\n          <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" />\n          <button type=\"submit\">Sign Up</button>\n          <br />\n          {actionData && (\n            <div className=\"text-red-500\">\n              User not found or password didn't match\n            </div>\n          )}\n          <br />\n          <div style={{ textAlign: \"center\" }}>\n            <h5>\n              Already have an account? <br />\n              <Link to=\"/login\" style={{ color: \"blue\" }}>\n                Log in here\n              </Link>\n            </h5>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAEA,uBAAsB;AACtB,sBAAmB;AAHnB;AA2Ce,SAAR,SAA0B;AA3CjC;AA4CE,QAAM,aAAa,cAAc;AACjC,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb;AAAA,yDAAC;AAAA,QAAG,WAAU;AAAA,QAAc;AAAA,SAA5B;AAAA;AAAA;AAAA;AAAA,aAAmC;AAAA,MACnC,mDAAC;AAAA,QAAI,WAAU;AAAA,QACb,6DAAC;AAAA,UACC,WAAU;AAAA,UACV,QAAO;AAAA,UACP,gBAAc;AAAA,UAEd;AAAA,+DAAC;AAAA,cAAM,WAAU;AAAA,cAAY,SAAQ;AAAA,cAAW;AAAA,eAAhD;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,mDAAC;AAAA,cAAM,MAAK;AAAA,cAAO,IAAG;AAAA,cAAW,MAAK;AAAA,eAAtC;AAAA;AAAA;AAAA;AAAA,mBAAiD;AAAA,YACjD,mDAAC;AAAA,cAAM,SAAQ;AAAA,cAAW;AAAA,eAA1B;AAAA;AAAA;AAAA;AAAA,mBAAkC;AAAA,YAClC,mDAAC;AAAA,cACC,MAAK;AAAA,cACL,IAAG;AAAA,cACH,MAAK;AAAA,cACL,eAAc,8CAAY,WAAZ,mBAAoB;AAAA,eAJpC;AAAA;AAAA;AAAA;AAAA,mBAKA;AAAA,YACA,mDAAC;AAAA,cAAM,SAAQ;AAAA,cAAkB;AAAA,eAAjC;AAAA;AAAA;AAAA;AAAA,mBAAiD;AAAA,YACjD,mDAAC;AAAA,cAAM,MAAK;AAAA,cAAW,IAAG;AAAA,cAAkB,MAAK;AAAA,eAAjD;AAAA;AAAA;AAAA;AAAA,mBAAmE;AAAA,YACnE,mDAAC;AAAA,cAAO,MAAK;AAAA,cAAS;AAAA,eAAtB;AAAA;AAAA;AAAA;AAAA,mBAA6B;AAAA,YAC7B,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAI;AAAA,YACH,cACC,mDAAC;AAAA,cAAI,WAAU;AAAA,cAAe;AAAA,eAA9B;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YAEF,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAI;AAAA,YACJ,mDAAC;AAAA,cAAI,OAAO,EAAE,WAAW,SAAS;AAAA,cAChC,6DAAC;AAAA,gBAAG;AAAA;AAAA,kBACuB,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,yBAAI;AAAA,kBAC7B,mDAAC;AAAA,oBAAK,IAAG;AAAA,oBAAS,OAAO,EAAE,OAAO,OAAO;AAAA,oBAAG;AAAA,qBAA5C;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA;AAAA,iBAJF;AAAA;AAAA;AAAA;AAAA,qBAKA;AAAA,eANF;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA;AAAA,WAjCF;AAAA;AAAA;AAAA;AAAA,eAkCA;AAAA,SAnCF;AAAA;AAAA;AAAA;AAAA,aAoCA;AAAA;AAAA,KAtCF;AAAA;AAAA;AAAA;AAAA,SAuCA;AAEJ;",
  "names": []
}

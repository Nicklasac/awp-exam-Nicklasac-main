{
  "version": 3,
  "sources": ["../../../app/components/formElements.jsx", "../../../app/routes/signup.jsx"],
  "sourcesContent": ["export function Label({ htmlFor, className, children }) {\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={[\"pointer mb-1 block font-semibold\", className ?? \"\"].join(\n        \" \"\n      )}\n    >\n      {children}\n    </label>\n  );\n}\nexport function Input({\n  type = \"text\",\n  name,\n  id = name,\n  placeholder,\n  className,\n  defaultValue,\n  defaultChecked,\n  ...rest\n}) {\n  return (\n    <input\n      type={type}\n      name={name}\n      id={id}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      defaultChecked={defaultChecked}\n      {...rest}\n      className={[\n        \"rounded border border-slate-200 py-2 px-3\",\n        className ?? \"\",\n      ].join(\" \")}\n    />\n  );\n}\nexport function Button({ type = \"submit\", children }) {\n  return (\n    <button\n      type={type}\n      className=\"rounded bg-blue-600 py-2 px-3 text-white transition-colors hover:bg-blue-700\"\n    >\n      {children}\n    </button>\n  );\n}\nexport function ErrorMessage({ children }) {\n  if (!children) {\n    return null;\n  }\n  return (\n    <div className=\"mb-3 rounded border border-amber-500 bg-amber-50 p-2 text-sm  text-amber-500\">\n      {children}\n    </div>\n  );\n}\n", "import { Form, useActionData } from \"@remix-run/react\";\nimport { Label, Input, Button, ErrorMessage } from \"~/components/formElements\";\nimport connectDb from \"~/db/connectDb.server.js\";\nimport { json, redirect } from \"@remix-run/node\";\n\nexport async function action({ request }) {\n  const db = connectDb();\n  const formData = await request.formData();\n  const user = db.models.User;\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  let data = Object.fromEntries(formData);\n  if (data.password === \"\" || data.email === \"\") {\n    return json(\n      { errorMessage: \"Please fill out all fields\", values: data },\n      { status: 400 }\n    );\n  }\n\n  if (data.password !== data.passwordConfirm) {\n    return json(\n      { errorMessage: \"Passwords do not match\", values: data },\n      { status: 400 }\n    );\n  } else {\n    const newUser = new user({\n      email: data.email,\n      password: data.password,\n    });\n    await newUser.save();\n    return redirect(\"/Login\");\n  }\n}\n\nexport default function SignUp() {\n  const dataAction = useActionData();\n\n  return (\n    <div>\n      <h1 className=\"mb-1 text-lg font-bold\">SignUp</h1>\n      <Form method=\"post\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          type=\"text\"\n          name=\"email\"\n          id=\"email\"\n          placeholder=\"Email\"\n          //   defaultValue={actionData?.values?.email}\n        />\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          placeholder=\"Password\"\n          defaultValue={dataAction?.values?.password}\n        />\n\n        <Label htmlFor=\"passwordConfirm\">Confirm Password</Label>\n        <Input\n          type=\"password\"\n          name=\"passwordConfirm\"\n          id=\"passwordConfirm\"\n          placeholder=\"Repeat Password\"\n          defaultValue={dataAction?.values?.passwordConfirm}\n        />\n        <br />\n        <ErrorMessage>{dataAction?.errorMessage}</ErrorMessage>\n        <br />\n        <Button type=\"submit\">Sign Up</Button>\n      </Form>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAO,SAAS,MAAM,EAAE,SAAS,WAAW,SAAS,GAAG;AACtD,SACE,mDAAC;AAAA,IACC;AAAA,IACA,WAAW,CAAC,oCAAoC,gCAAa,EAAE,EAAE;AAAA,MAC/D;AAAA,IACF;AAAA,IAEC;AAAA,KANH;AAAA;AAAA;AAAA;AAAA,SAOA;AAEJ;AACO,SAAS,MAAM;AAAA,EACpB,OAAO;AAAA,EACP;AAAA,EACA,KAAK;AAAA,EACL;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,KACG;AACL,GAAG;AACD,SACE,mDAAC;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACC,GAAG;AAAA,IACJ,WAAW;AAAA,MACT;AAAA,MACA,gCAAa;AAAA,IACf,EAAE,KAAK,GAAG;AAAA,KAXZ;AAAA;AAAA;AAAA;AAAA,SAYA;AAEJ;AACO,SAAS,OAAO,EAAE,OAAO,UAAU,SAAS,GAAG;AACpD,SACE,mDAAC;AAAA,IACC;AAAA,IACA,WAAU;AAAA,IAET;AAAA,KAJH;AAAA;AAAA;AAAA;AAAA,SAKA;AAEJ;AACO,SAAS,aAAa,EAAE,SAAS,GAAG;AACzC,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AACA,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACZ;AAAA,KADH;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;;;ACvDA,8BAAsB;AAFtB;AAkCe,SAAR,SAA0B;AAlCjC;AAmCE,QAAM,aAAa,cAAc;AAEjC,SACE,mDAAC;AAAA,IACC;AAAA,yDAAC;AAAA,QAAG,WAAU;AAAA,QAAyB;AAAA,SAAvC;AAAA;AAAA;AAAA;AAAA,aAA6C;AAAA,MAC7C,mDAAC;AAAA,QAAK,QAAO;AAAA,QACX;AAAA,6DAAC;AAAA,YAAM,SAAQ;AAAA,YAAQ;AAAA,aAAvB;AAAA;AAAA;AAAA;AAAA,iBAA4B;AAAA,UAC5B,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,aAAY;AAAA,aAJd;AAAA;AAAA;AAAA;AAAA,iBAMA;AAAA,UACA,mDAAC;AAAA,YAAM,SAAQ;AAAA,YAAW;AAAA,aAA1B;AAAA;AAAA;AAAA;AAAA,iBAAkC;AAAA,UAClC,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,aAAY;AAAA,YACZ,eAAc,8CAAY,WAAZ,mBAAoB;AAAA,aALpC;AAAA;AAAA;AAAA;AAAA,iBAMA;AAAA,UAEA,mDAAC;AAAA,YAAM,SAAQ;AAAA,YAAkB;AAAA,aAAjC;AAAA;AAAA;AAAA;AAAA,iBAAiD;AAAA,UACjD,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,aAAY;AAAA,YACZ,eAAc,8CAAY,WAAZ,mBAAoB;AAAA,aALpC;AAAA;AAAA;AAAA;AAAA,iBAMA;AAAA,UACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC;AAAA,YAAc,mDAAY;AAAA,aAA3B;AAAA;AAAA;AAAA;AAAA,iBAAwC;AAAA,UACxC,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC;AAAA,YAAO,MAAK;AAAA,YAAS;AAAA,aAAtB;AAAA;AAAA;AAAA;AAAA,iBAA6B;AAAA;AAAA,SA7B/B;AAAA;AAAA;AAAA;AAAA,aA8BA;AAAA;AAAA,KAhCF;AAAA;AAAA;AAAA;AAAA,SAiCA;AAEJ;",
  "names": []
}
